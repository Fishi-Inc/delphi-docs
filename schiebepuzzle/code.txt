unit Schiebepuzzle;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ExtCtrls, Math; //uses Math for random

type
  TForm1 = class(TForm)
    PanelGameBoard: TPanel;
    GroupBox1: TGroupBox;
    LabelDevCoords: TLabel;
    LabelDevFin: TLabel;
    TimerRed: TTimer;
    TimerMove: TTimer;
    BitBtn1: TBitBtn;
    BitBtn2: TBitBtn;
    TimerGame: TTimer;
    Label1: TLabel;
    LabelTimePlayed: TLabel;

    procedure FormCreate(Sender: TObject);
    procedure blockClick(Sender: TObject);
    procedure TimerRedTimer(Sender: TObject);
    procedure TimerMoveTimer(Sender: TObject);
    procedure BitBtn2Click(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure TimerGameTimer(Sender: TObject);
  private
    { Private-Deklarationen }
  public
    { Public-Deklarationen }
  end;

var
  Form1: TForm1;
  board: Array[1..4, 1..4] of TPanel; //source http://informatik.rostfrank.de/delphiseiten_neu/delphiseiten/index.html  Mehrdim. Arrays
  randomString: Array[1..16] of Integer;
  ranList: TStringList; //available List numbers
  redPanel: TPanel;
  tri: Integer = 1; //tri= TimerRed-Index
  tmi: Integer = 1; //tmi = TimerMove-Index
  b1, b2: TPanel; //block 1 and 2 (block which will switch place)
  dir: Integer;
  playtime: Integer;

implementation

{$R *.dfm}

 { TODO 1 : add Finish screen }
 { TODO 2 : fix ending } 

{
######### functions #########
}

procedure isSolved;
var n, x, y: Integer;
begin
  n := 0;
  for y:=1 to 4 do
  begin
    for x:=1 to 4 do
    begin
    	if y*x = 16 then
      begin
      	if board[x, y].Tag = 0 then n:=n+1;
      end
      else
      begin
      	if board[x, y].Tag = (y-1)*4+x then n:=n+1;
        Form1.LabelDevFin.Caption := IntToStr(n);
      end;
    end;
  end;

  if n >= 16 then
  begin
  	Form1.LabelDevFin.Caption := 'FINISHED!!!';
    Form1.TimerGame.Enabled := False;
    ShowMessage('Glückwunsch, du hast es in ' + Form1.LabelTimePlayed.Caption + ' geschafft!');
  end;
end;

procedure moveBlock(x, y, z: Integer);
begin
	b1 := board[x, y];
  board[x, y] := nil;
	{case z of
  	1: board[x-1, y] := b2;
    2: board[x, y+1] := b2;
    3: board[x+1, y] := b2;
    4: board[x, y-1] := b2;
  end;}

	case z of
  	1: begin b2 := board[x-1, y]; board[x-1, y] := nil; end;
    2: begin b2 := board[x, y-1]; board[x, y-1] := nil; end;
    3: begin b2 := board[x+1, y]; board[x+1, y] := nil; end;
    4: begin b2 := board[x, y+1]; board[x, y+1] := nil; end;
  end;

  case z of
  	1: board[x-1, y] := b1;
    2: board[x, y-1] := b1;
    3: board[x+1, y] := b1;
    4: board[x, y+1] := b1;
  end;

  board[x, y] := b2;
  dir := z;
  Form1.TimerMove.Enabled := True;
  //updateBlock(x, y);
  isSolved;
end;



function checkSides(x, y: Integer): Integer;
begin
	//1 - left, 2 - top, 3 - right, 4- bottom
	//return 0 if no side is free
  Result:=0;

	//check left
  if x>1 then
  begin
		if board[x-1, y].Tag = 0 then Result := 1;
  end;

  //check top
  if y>1 then
  begin
  	if board[x, y-1].Tag = 0 then Result := 2;
  end;

  //check right
  if x<4 then
  begin
  	if board[x+1, y].Tag = 0 then Result := 3;
  end;

  //check bottom
  if y<4 then
  begin
  	if board[x, y+1].Tag = 0 then Result := 4;
  end;

  if Result=0 then //safe-check to make sure animation is done
  begin
  	if Form1.TimerRed.Enabled=False then
    begin
  		redPanel := board[x, y];
	  	Form1.TimerRed.Enabled := True;
  	end;
  end
  else moveBlock(x, y, Result);
end;



function getInv(arr: array of Integer): Integer;
var i, j, inv: Integer;
begin
  inv := 0;
  for i:= 0 to 14 do
  begin
    for j := i+1 to 15 do
    begin
    	if arr[i] < 16 then
      begin
      	if arr[i] > arr[j] then inv := inv+1;
      end;
    end;
  end;
	Result := inv;
end;



//find the row where the blank tile is
function findFree(arr: array of Integer): Integer;
var x, y, a, b: Integer;
		prevBoard: Array[1..4, 1..4] of Integer;
begin
	for y:=1 to 4 do
  begin
    for x:=1 to 4 do
    begin
      prevBoard[x, y] := arr[(y-1)*4+x-1];      //array geht von 0 bis 15, wenn pos 16 abgerufen werden soll, geht er zur�ck auf pos 1 (Anfangs-pos) ??? beinhaltet 2mal 1. wert, auf pos 0 und 16
    end;
  end;

  for b:=1 to 4 do
  begin
    for a:=1 to 4 do
    begin
      if prevBoard[a, b] = 16 then begin Result := (4-b)+1; Exit; end;
    end;
  end;
end;



function isSolvable(arr: array of Integer) : Boolean;
var inversions, pos: Integer; //inversions: Reihenfolge von Blöcken, die nicht geordnet sind, pos: row of blank
begin
  inversions := getInv(arr);
  pos := findFree(arr);

  if not Odd(pos) then //if even (row 2 & 4)
  begin
  	if Odd(inversions) then Result:=True //if inv odd
    else Result:=False;                  //if inv even
  end

  else
  begin
    if Odd(inversions) then Result:=False //if inv odd
    else Result:=True;                    //if inv even
  end;
end;



procedure shuffle;
var i, n: byte;
		x, y, ran, pos: Integer;
begin
	x:=1;
  y:=1;

  Form1.PanelGameBoard.DestroyComponents;


  //generate random string
  repeat
  	randomize(); //reset built in randomness
    ranList := TStringList.Create;
    for n:=1 to 16 do randomString[n] := 0;
	  for n:=1 to 16 do
 		begin
  		ranList.Add(IntToStr(n));
  	end;

  	for n:=1 to 16 do
  	begin
      if n=16 then pos:=1
      else pos := RandomRange(1, 18-n);

    	ran := StrToInt(ranList[pos-1]);
    	randomString[n] := randomString[n] + ran;
    	ranList.Delete(pos-1);
  	end;
  until isSolvable(randomString);

  for i:=1 to 16 do
  begin
  	//wonder why if-checks can stay up here or down below - no changes a all

    // board[c, r] := TPanel(FindComponent('Block' + IntToStr(i))); //board[Column, Row] - http://www.teachitza.com/delphi/2Darrays.htm

    board[x, y] := TPanel.Create(Form1.PanelGameBoard);

    //create empty block
    if randomString[i]=16 then
    begin
    	with board[x, y] do
      begin
     	 	Parent := Form1.PanelGameBoard;
     	 	Width := 0;
        Height := 0;
      	Left := 0;
      	Top := 0;
      	Tag := 0;
        Visible := False;
    	end;
    end

    else
    begin
    	//create 15 blocks
    	with board[x, y] do  //set properties (source: informatik.frankrost.de -> http://informatik.rostfrank.de/info/lex05/lex0505.html#ref5 http://informatik.rostfrank.de/info/lex05/download/delphi/komp_array/quelltext.txt
    	begin
    		Parent := Form1.PanelGameBoard;
    		Width := 100;
    		Height := 100;
      	Left := x * 100 - 100;
      	Top := y * 100 - 100;
      	Tag := randomString[i];
      	Show;
      	OnClick := Form1.blockClick;
      	Caption := inttostr(randomString[i]);
        BorderStyle := bsNone;
        Color := rgb(224, 224, 224);
    	end;
    end;

    if x > 3 then y:=y+1;             //check if rwo > 3 (end of previouse row) then go to the next column
    if x > 3 then x:=1 else x:=x+1; 	//check if row > 3, if so then go back to 1 (begin rowindex)
  end;
end;


{
######### events #########
}

procedure TForm1.FormCreate(Sender: TObject);
begin
  shuffle;
end;



procedure TForm1.blockClick(Sender: TObject);
var i, x, y, res: Integer;
begin
	if TimerMove.Enabled=False then
  begin
		x := 1;
  	y := 1;
 	 	for i:=1 to 16 do
    begin
    	if Sender = board[x, y] then break;
    	if x > 3 then y:=y+1;
    	if x > 3 then x:=1 else x:=x+1;
  	end;

  	res := checkSides(x, y);
  	LabelDevCoords.Caption := 'x: ' + IntToStr(x) + ' y: ' + IntToStr(y) + sLineBreak + 'Check: ' + IntToStr(res);
	end;
end;



procedure TForm1.TimerRedTimer(Sender: TObject);
begin
  redPanel.Color := rgb(255, 0, 0);
  if tri < 8 then
  begin
    redPanel.Color :=  rgb(255, round((tri/8)*255), round((tri/8)*255));
    tri := tri+1;
  end
  else
  begin
  	tri:=1;
    redPanel.Color := clBtnface;
    TimerRed.Enabled := false;
  end;
end;

procedure TForm1.TimerMoveTimer(Sender: TObject);
begin
if tmi < 6 then
  begin
  	//position of b1 and b2
  	case dir of
    	1: begin b1.Left:=b1.Left-20; {b2.Left:=b2.Left+20;} end;     //disabled animation for blank tile
      2: begin b1.Top:=b1.Top-20; {b2.Top:=b2.Top+20;} end;
      3: begin b1.Left:=b1.Left+20; {b2.Left:=b2.Left-20;} end;
      4: begin b1.Top:=b1.Top+20; {b2.Top:=b2.Top-20;} end;
    end;
    tmi := tmi + 1;
  end

  else
  begin
  	tmi := 1;
    TimerMove.Enabled := False;
  end;
end;

procedure TForm1.BitBtn2Click(Sender: TObject);
begin
	if GroupBox1.Visible=True then GroupBox1.Visible:=False
  else GroupBox1.Visible:=True;
end;

procedure TForm1.BitBtn1Click(Sender: TObject);
begin
	shuffle;
  playtime := 0;
  TimerGame.Enabled := True;
end;

procedure TForm1.TimerGameTimer(Sender: TObject);
var m, s: String;
begin
	m := IntToStr(playtime div 60); //div -> Integer     (https://docwiki.embarcadero.com/RADStudio/Alexandria/en/Expressions_%28Delphi%29#Arithmetic_Operators=
	s := IntToStr(playtime mod 60);

  if StrToInt(m) < 10 then m:='0'+m;
  if StrToInt(s) < 10 then s:='0'+s;


	playtime := playtime + 1;

	LabelTimePlayed.Caption := m + ':' + s;
end;

end.
